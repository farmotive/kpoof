#!/bin/bash
#
# See usage().

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

NOW=$(date +"%F")
NOWT=$(date +"%T")
APPDIR="${HOME}"/.kpoof
DAEMONSFILE="${APPDIR}"/kpoofd
LOGFILE=${APPDIR}/kpoof-${NOW}-${NOWT}.log

# We do this so the called script name variable is available in utility functions
# below, in case of name change, brew alias, etc.
SCRIPT=`basename ${BASH_SOURCE[0]}`

usage() {
  cat <<EOF
${SCRIPT}(1)

NAME
    ${SCRIPT} - Quick k8s pod port-forward utility.

REQUIRES
    kubectl(1)

SYNOPSIS
    ${SCRIPT} [OPTIONS]

DESCRIPTION
    ${SCRIPT} is a quick kubernetes (k8s) utility to port-forward a pod to localhost (127.0.0.1). ${SCRIPT} prompts for:
      - <CONTEXT> (defaults to current context)
      - <NAMESPACE> (defaults to current ns. See kubens(1))
      - <POD> (defaults to "1")
    ENTER to use defaults.

OPTIONS
    -h, --help
        Show this help message
    -d, --daemon
        Runs kpoof command as a daemon
    -k, --killd
        Kills a kpoof command daemon, if running
    -a, --killd-all
        Kills all running kpoof command daemons defined in $HOME/.kpoof/kpoofd

SEE ALSO
    kubectx(1), kubens(1), kex(1)
EOF
}

cur_ctx() {
 kubectl config current-context 
}

#Test the following, may not be needed
ctx_param() {
  local ctx=$(ctx_select)
  if [[ ! -z ${ctx:-} ]]; then
    echo "--context=${ctx}"
  fi
}

ctx_list() {
  kubectl config get-contexts -o=name | sort -n
}

ctx_number_list() {
  ctx_list | nl -d " "
}

ctx_select() {
  if [[ ! -z ${CTX:-} ]]; then
    ctx_list | sed -n ${CTX}p
  elif [[ ! -z ${CONTEXT:-} ]]; then
    echo $CONTEXT
  else
    cur_ctx
  fi
}

ns_current() {
  # Borrowed partly from kubens current_namespace().
  # cur_ctx=$(kubectl config current-context)
  echo "$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"$(ctx_select)\")].context.namespace}")"
}

ns_param() {
  local ns=$(ns_select)
  if [[ ! -z ${ns:-} ]]; then
    echo "--namespace=${ns}"
  fi
}

ns_list() {
  kubectl $(ctx_param) get namespaces -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

ns_number_list() {
  ns_list | nl
}

ns_select() {
  if [[ ! -z ${NS:-} ]]; then
    ns_list | sed -n ${NS}p
  elif [[ ! -z ${NAMESPACE:-} ]]; then
    echo $NAMESPACE
  else
    ns_current
  fi
}

po_list() {
  kubectl $(ctx_param) $(ns_param) \
    get pods \
    -o=jsonpath='{range .items[*].metadata.name}{@}{"\n"}{end}'
}

po_number_list() {
  po_list | nl
}

po_select() {
  po_list | sed -n ${POD:-1}p
}

port_list() {
  kubectl get po $(ctx_param) $(ns_param) $(po_select)\
  -o=jsonpath='{..containerPort}' \
  | tr " " "\n" \
  | sort -u
}

# Because *nix denies binding to ports below 1001, we assign a port of N+50000,
# where `n` is a sub-1001 port. Much better to adhere to the security protocol
# than to manipulate the bash binary.
# See second caveat: https://stackoverflow.com/a/414258/4096495
port_check() {
  if [[ $1 -lt 1001 ]]; then
    echo "$(($1+50000))";
  else
    echo $1;
  fi
}

port_x() {
  for i in $(port_list); do
    echo $(port_check $i):${i}
  done
}

port_number_list() {
  port_list | nl
}

po_pf_all() {
  # Store CMD as an array, because passing strings with colons is unpredictable.
  local CMD=(kubectl port-forward $(ctx_param) $(ns_param) $(po_select) $(port_x))
  if [ ! -z "${KILLD:-}" ]; then killd "${CMD[@]}"; exit 0; fi
  checkdaemon "${CMD[@]}"
}

# Requires daemon process CMD array as argument.
killd() {
  CMD=("$@")
  STRING=$(printf ' %q' "${CMD[@]}"  | sed -e 's/^[[:space:]]*//')
  local PID=$(ps -aef | grep $STRING | grep -v grep | awk '{print $2}')
  if [ ! -z "${PID}" ]; then
    kill -9 ${PID} || true
  fi

  # Remove CMD entry from daemon file.
  local TMPFILE="${APPDIR}"/kpoofd.tmp
  if [ -f $DAEMONSFILE ]; then
    awk -v cmd=$STRING '$0!=cmd {print $0}' $DAEMONSFILE > $TMPFILE && mv $TMPFILE $DAEMONSFILE
  fi
}

killdall() {
  if [ -f $DAEMONSFILE ]; then
    while read CMD;
    do
      killd ${CMD}
    done < $DAEMONSFILE
    rm $DAEMONSFILE
  fi
}

# Requires daemon process CMD array as argument.
checkdaemon() {
  CMD=("$@")
  if [ ! -z "${DAEMON:-}" ]; then
    daemon "${CMD[@]}"
  else
    "${CMD[@]}"
  fi
}

# Requires daemon process CMD array as argument.
# Each daemon CMD (see `man ps`) consists of a unique `kubectl port-forward`
# command string, represented in this argument as an array.
daemon() {
  CMD=("$@")
  STRING=$(printf ' %q' "${CMD[@]}"  | sed -e 's/^[[:space:]]*//')
  # Always kill any running version of this exact process to avoid port-forward
  # conflicts.
  # Note that we could alternatively check whether the process is already
  # running, and if so, not bother killing/restarting the daemon. owever, if the
  # earlier running process is running but no longer works, then the user would
  # need to `kpoof -k` to kill it and then `kpoof -d` to start it again. Since
  # the port-forward process is quick to both kill and start, we do it for the
  # user automatically to save manual checking and frustration.
  killd "${CMD[@]}"

  # Start daemon.
  "${CMD[@]}" > ${LOGFILE} 2>&1 &

  # Add to list of running daemons.
  echo $STRING >> ${DAEMONSFILE}

  # Give the user initial output so they have immediate port-forwarding info
  # even when daemonizing. However, it may take a short time for the kubectl
  # port-forward command to write output to the logfile, so wait a reasonable
  # amount of time (10 seconds total, at 1/2 second intervals).
  for i in $(seq 1 20);
  do
    OUTPUT=$(cat ${LOGFILE})
    if [ ! -z "$OUTPUT" ]; then
      echo "${OUTPUT}"
      echo 'When finished, stop this daemon process with kpoof -k, or stop all kubectl port-forward processes with kpoof -a'
      exit 0
    fi
    echo 'Port forwarding is still pending. Waiting...'
    sleep 0.5
  done
  echo "Port forwarding didn't resolve within 10 seconds"
}

initappdir() {
  mkdir -p ${APPDIR}
}

# Transform long options to short ones. Sick trick.
# http://stackoverflow.com/a/30026641/4096495
for arg in "$@"; do
  shift
  case "$arg" in
    "--help")       set -- "$@" "-h" ;;
    "--port")       set -- "$@" "-p" ;;
    "--daemon")     set -- "$@" "-d" ;;
    "--killd")      set -- "$@" "-k" ;;
    "--killd-all")  set -- "$@" "-a" ;;
    *)              set -- "$@" "$arg"
  esac
done

while getopts :hdka OPT; do
  case $OPT in
    h ) HELP=true;;
    d ) DAEMON=true;;
    k ) KILLD=true;;
    a ) KILLDALL=true;;
    \?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    : ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
  esac
done
shift $((OPTIND-1))

# Help and port-forward should not happen simultaneously, so elif.
if [[ ${HELP:-} == 'true' ]]; then
  usage; exit 0
elif [[ ${KILLDALL:-} == 'true' ]]; then
  killdall; exit 0
else
  initappdir
  ns=$(ns_current)
  ctx=$(cur_ctx)
  echo "Cluster? (default ${ctx:-default}):"; ctx_number_list; read CTX;
  echo "Namespace? (default ${ns:-default}):"; ns_number_list; read NS;
  echo 'Pod number? (default 1):'; po_number_list; read POD;
  po_pf_all
fi
